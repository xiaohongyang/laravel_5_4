<?php

namespace App\Models;

use App\Scopes\DeletedScope;
use App\User;
use Dotenv\Exception\ValidationException;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\HttpRequest;
use Illuminate\Http\Request;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Scopes\AuthorScope;
use App\Observer\ArticleObserver;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Event;
use App\Events\ArticleReleased;
use League\Flysystem\Exception;

class Article extends BaseModel
{

    protected $table = 'articles';



    //
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

//        static::addGlobalScope(new AuthorScope);
//        static::addGlobalScope(new DeletedScope());

        Article::observe(ArticleObserver::class);

//        static::addGlobalScope('author', function (Builder $builder){
//            $builder->where('author', '=', '肖红阳');
//        });

    }

    use SoftDeletes;

    protected $primaryKey = 'id';

    public $incrementing = true;

    public $timestamps = true;

    public $fillable = ['title', 'author', 'user_id', 'thumb', 'from_host', 'type_id'];

    protected $attributes = [
        'thumb' => ''
    ];

    public function create($data) {

        $result = false;
        $validator = \Validator::make($data, [
            'title' => ['required'],
            'author' => ['required'],
            'user_id' => ['required'],
            'type_id' => ['required']
        ]);

        if(!$validator->fails()){

            $this->fill($data);
            $result = $this->save();
            if ($result) {

                $articleDetail = new ArticleDetail();
                //保存detail关联表

                if (key_exists('contents',$data) && strlen(trim($data['contents']))) {
                    $contents = $data['contents'];
                    $articleDetail->contents = $contents;
                    $this->detail() ->save($articleDetail);
                }
                //保存标签

                if (key_exists('tags', $data) && strlen($data['tags']) ) {

                    $tags = $data['tags'];
                    $tags = explode(',', $tags);

                    $relation = new ArticleTagRelationsModel();
                    foreach ($tags as $item) {
                        $tag = ArticleTagsModel::firstOrCreate(['name' => $item]);
                        $relation->create($this, $tag);
                    }
                }
            }
        } else {
            $this->message = $validator->messages()->getMessageBag();
        }
        return $result ? $this->id : false;
    }



    public function edit($data) {

        $this->fill($data);
        $result = $this->save();

        if ($result) {

            //详情
            $detail = $this->detail;

            if(key_exists('contents', $data) && $data['contents'] != null){

                $input = ['contents' => $data['contents']];
                $result = $detail->fill($input)->save();
                \Log::info('$detail->fill($request->all())->save() 结果:' . $data);

                if ($this->tags && count($this->tags)) {
                    foreach ($this->tags as $item) {
                        $item->delete();
                    }
                }
            }

            if(key_exists('tags', $data) && is_null($data['tags'])) {
                //保存标签
                $tags = $data['tags'];
                $tags = explode(',', $tags);
                if (is_array($tags) && count($tags)) {
                    $relation = new ArticleTagRelationsModel();
                    foreach ($tags as $item) {
                        $tag = ArticleTagsModel::firstOrCreate(['name' => $item]);
                        $relation->create($this, $tag);
                    }
                }
            }
        }
        return $result;
    }

    private function _handle(&$article, Request $request) {

        $article->title = $request->get('title');
        $article->thumb = $request->get('thumb','');
        $article->author = '5';
        $article->user_id = \Auth::id() ? \Auth::id() : ($request->has('user_id') ? $request->get('user_id') : 0);
        $article->from_host = $request->get('from_host', '');
        $article->type_id = $request->get('type_id',0);
    }

    public function save(array $options = [])
    {
        //return parent::save($options);
        $result = parent::save($options); // TODO: Change the autogenerated stub
        return $result;
    }


    public function doFirstOrCreate(Request $request) {
        $article = Article::firstOrCreate(['title'=> $request->title, 'author'=>$request->author]);
        return $article;
    }

    public function doFirstOrNew(Request $request) {
        $article = Article::firstOrNew(['title'=> $request->title, 'author'=>$request->author]);
        return $article;
    }

    public function doUpdateOrCreate(Request $request){
        $article = Article::updateOrCreate( ['title'=>$request->title], ['title'=>$request->title, 'author'=>$request->author] );
        return $article;
    }

    public function doDelete($id){

        if (!is_int($id) || !$id)
            return false;

        $article = Article::find($id);
        $result = false;
        if ($article->delete()) {

            if ($article->tags && count($article->tags)) {
                foreach ($article->tags as $tag) {
                    $tag->delete();
                }
            }
            $result = true;
        }
        return $result;
    }


    public function doDestroy(Request $request){

        $rs = Article::destroy([$request->id]);
        return $rs;
    }

    public function getOnlyTrashed() {
        $rs = Article::onlyTrashed()
            ->where('id', '>', 0)
            ->get();

        return $rs;
    }

    public function unDelete(){
        if($this->trashed()) {
            return $this->restore();
        }
        return true;
    }

    public function doForceDelete(){
        return $this->forceDelete();
    }

    public function getList(Request $request){

        $currentPage = $request->get('page', 1);
        $perPage = $request->get('perPage', 10);
        $offset = ($currentPage-1) * $perPage;

        //DB::enableQueryLog();

        $items = self::with('detail')->has('detail')->orderBy('id', 'desc')
            ->offset($offset)
            ->limit($perPage)
            ->get();

        //dd(DB::getQueryLog());
        $pagination = new Paginator($items, $perPage, $currentPage);
        foreach ($items as &$item){
            $tags = $item->tags()->get();
            $tagItems = [];
            foreach ($tags as $tag){
                if(!is_null($tag->tag))
                    $tagItems[] = $tag->tag->toArray();
            }
            $item['tags'] = $tagItems;
        }
        return $pagination;
    }


    public function authorUser(){
        return $this->belongsTo(User::class, 'author', 'id');
    }

    public function detail(){
        return $this->hasOne(ArticleDetail::class, 'article_id');
    }

    public function tags(){
        return $this->hasMany(ArticleTagRelationsModel::class, 'article_id');
    }
}
